apiVersion: installer.xiaoming.io/v1alpha1 # Updated APIVersion
kind: ClusterConfig
metadata:
  name: ks-installer-cluster # This will be the primary cluster name
spec:
  hosts:
    # It's good practice for each host to have a unique name
    - name: node1
      address: "192.168.0.10"
      internalAddress: "192.168.0.10" # Can be same as address if no separate internal net
      port: 22
      user: "root"
      privateKeyPath: "/root/.ssh/id_rsa" # Ensure this key exists on the machine running xm
    - name: node2
      address: "192.168.0.11"
      internalAddress: "192.168.0.11"
      port: 22
      user: "root"
      privateKeyPath: "/root/.ssh/id_rsa"
    - name: node3 # Example for a third node, perhaps a dedicated etcd or worker
      address: "192.168.0.12"
      internalAddress: "192.168.0.12"
      port: 22
      user: "root"
      privateKeyPath: "/root/.ssh/id_rsa"
    # Add more worker nodes as needed
    - name: worker1 # Example worker
      address: "192.168.0.20"
      internalAddress: "192.168.0.20"
      port: 22
      user: "root"
      privateKeyPath: "/root/.ssh/id_rsa"


  roleGroups:
    etcd: # For kubeadm stacked etcd, these should be control-plane nodes
      - node1
      - node2
      - node3
    control-plane:
      - node1
      - node2
      - node3
    worker: # Worker nodes
      - worker1
      # Can also include control-plane nodes if they are to run workloads
      # - node1
      # - node2
      # - node3
    # loadbalancer: # Optional: if using internal load balancer managed by this tool
      # - node1 # Example: run LB on one of the control plane nodes

  controlPlaneEndpoint:
    domain: "lb.example.com"     # External access point domain name
    address: "192.168.0.100"     # External LoadBalancer IP or Virtual IP (VIP)
                                 # If using internal LB (e.g. on node1), this might be node1's IP or a VIP managed by keepalived
    port: 6443

  kubernetes:
    version: "v1.28.2"
    clusterName: "my-production-cluster" # User-friendly name, distinct from metadata.name if needed
    autoRenewCerts: true
    containerManager: "containerd"

  etcd:
    type: "kubeadm" # Default: etcd is stacked on control-plane nodes, managed by kubeadm
    # Example for external etcd:
    # type: "external"
    # endpoints:
    #   - "https://etcd1.example.com:2379"
    #   - "https://etcd2.example.com:2379"
    #   - "https://etcd3.example.com:2379"
    # caFile: "/path/to/your/etcd-ca.crt"
    # certFile: "/path/to/your/etcd-client.crt"
    # keyFile: "/path/to/your/etcd-client.key"

  network:
    plugin: "calico"
    kubePodsCIDR: 10.244.0.0/16
    kubeServiceCIDR: 10.96.0.0/12
    blockSize: 26 # Example CNI block size, specific to some CNI plugins like Calico
    multusCNI:
      enabled: false # Set to true to enable Multus CNI

  registry:
    type: "docker" # Could be "harbor", "acr", "ecr", etc.
    privateRegistry: "dockerhub.kubekey.local" # Your private registry domain
    namespaceOverride: "kubekey" # Namespace to pull images from in private registry
    auths:
      "dockerhub.kubekey.local":
        username: "admin"
        password: "password"
      "another.registry.com":
        username: "user1"
        password: "password123"
    registryMirrors:
      - "https://docker.mirrors.ustc.edu.cn"
      - "https://registry.cn-hangzhou.aliyuncs.com"
    insecureRegistries:
      - "my-insecure-registry.local"

  # internalLoadbalancer: "haproxy" # Optional: if an internal LB (like haproxy) is to be deployed by this tool
                                 # If empty or not defined, assumes external LB or single control-plane node.
